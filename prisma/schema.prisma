// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String         @id @default(cuid())
  name          String
  email         String         @unique
  password      String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  Folders       Folder[]
  Files         File[]
  SharedFolders SharedFolder[]

  @@index([email])
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String   @db.Text // MediumText may be needed for MySql
  expiresAt DateTime
}

model File {
  id        String   @id @default(cuid())
  name      String
  size      Float
  url       String
  mimeType  String // e.g., "image/png", "application/pdf"
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  folderId  String
  Folder    Folder   @relation(fields: [folderId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Folder {
  id           String        @id @default(cuid())
  name         String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  userId       String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  files        File[]
  parentId     String? // Optional if it's a root folder
  parent       Folder?       @relation("FolderToSubfolders", fields: [parentId], references: [id], onDelete: Cascade)
  children     Folder[]      @relation("FolderToSubfolders")
  SharedFolder SharedFolder?

  @@index([parentId])
}

model SharedFolder {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  folderId  String   @unique
  Folder    Folder   @relation(fields: [folderId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  expiresAt DateTime
}
